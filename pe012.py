"""
Project Euler Problem #12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Solution approach:
nth triangular number = n*(n+1)/2
Since n and (n+1) has no common factors except 1, we can take number of divisors for (n/2 and n+1) OR (n and (n+1)/2) 
whether if n is even and multiply the two to get the total num of divisors.
"""

import math
import time
from common_utils import tau


def highly_div_triangular_num(k):
	"""
	Returns the first triangular number to have over 'k' divisors
	"""
	n = 1
	count = 0
	while count <= k:
		
		if n%2 == 0:
			count1 = tau(n//2)
			count2 = tau(n+1)
		else:
			count1 = tau(n)
			count2 = tau((n+1)//2)
		count = count1 * count2
		n += 1
	triangular_num = n*(n+1)//2
	return triangular_num


if __name__ == "__main__":
	s = time.time()
	print(highly_div_triangular_num(500))
	print(time.time()-s)
